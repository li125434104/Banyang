//
//  UIImage+OCAdditions.m
//  Ocarina
//
//  Created by CAI on 13-6-21.
//  Copyright (c) 2013å¹´ CAI. All rights reserved.
//

#import "UIImage+OCAdditions.h"
#import "OCTypes.h"

@implementation UIImage (OCAdditions)

+ (UIImage *)uncacheImageNamed:(NSString *)name {
    if (!name.length)
        return nil;
    
    NSString *ext = [name pathExtension];
    name = [name stringByDeletingPathExtension];
    NSString *path = [[NSBundle mainBundle] pathForResource:name ofType:ext];
    return [UIImage imageWithContentsOfFile:path];
}

+ (UIImage *)imageWithColor:(UIColor *)color size:(CGSize)size {
    return [self imageWithSize:size drawingBlock:^{
        [color setFill];
        UIRectFill(CGContextGetClipBoundingBox(UIGraphicsGetCurrentContext()));
    }];
}

+ (UIImage *)imageWithSize:(CGSize)size drawingBlock:(OCSimpleBlock)drawingBlock {
    UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);
    if (drawingBlock) drawingBlock();
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return newImage;
}

- (UIImage *)resizableWithCapInsets:(UIEdgeInsets)capInsets {
    if ([self respondsToSelector:@selector(stretchableImageWithLeftCapWidth:topCapHeight:)])
        return [self stretchableImageWithLeftCapWidth:capInsets.left topCapHeight:capInsets.top]; //stretch
    else
        return [self resizableImageWithCapInsets:capInsets];  //tiled
}

- (UIImage *)resizableWithCap:(CGFloat)cap {
    CGFloat roundCap = rintf(cap);
    UIEdgeInsets insets = UIEdgeInsetsMake(roundCap, roundCap, roundCap, roundCap);
    return [self resizableWithCapInsets:insets];
}


- (UIImage *)imageWithScale:(CGFloat)scale {
    return [UIImage imageWithCGImage:self.CGImage scale:scale orientation:UIImageOrientationUp];
}

- (UIImage *)imageWithRadius:(CGFloat)radius {
    if (radius <= 0)
        return self;
    
    UIGraphicsBeginImageContextWithOptions(self.size, NO, 0);
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGRect rect = CGRectMake(0, 0, self.size.width, self.size.height);
    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:radius];
    CGContextAddPath(context, path.CGPath);
	CGContextClip(context);
    [self drawInRect:rect];
    
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return newImage;
}

- (UIImage *)imageInPath:(UIBezierPath *)path {
    CGRect rect = path.bounds;
    UIGraphicsBeginImageContextWithOptions(rect.size, NO, 0.0);
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGContextTranslateCTM(context, 0, rect.size.height);
    CGContextScaleCTM(context, 1, -1);
    
    CGContextTranslateCTM(context, -rect.origin.x, rect.origin.y);
    
    [path applyTransform:CGAffineTransformConcat(CGAffineTransformMakeTranslation(0, -rect.size.height), CGAffineTransformMakeScale(1, -1))];
    [path addClip];
    
    CGContextDrawImage(context, CGRectMake(0, -(self.size.height - rect.size.height), self.size.width, self.size.height), self.CGImage);
    
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return newImage;
}

- (UIImage *)imageInRect:(CGRect)rect {
    rect.origin.x *= self.scale;
    rect.origin.y *= self.scale;
    rect.size.width *= self.scale;
    rect.size.height *= self.scale;
    
    CGImageRef newImageRef = CGImageCreateWithImageInRect(self.CGImage, rect);
    UIImage *newImage = [UIImage imageWithCGImage:newImageRef scale:self.scale orientation:UIImageOrientationUp];
    CGImageRelease(newImageRef);
    return newImage;
}

- (UIImage *)scaleToSize:(CGSize)size {
    UIGraphicsBeginImageContextWithOptions(size, YES, self.scale);
    [self drawInRect:CGRectMake(0, 0, size.width, size.height)];
    UIImage* scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return scaledImage;
}

- (UIImage *)scaleToRatio:(CGFloat)ratio {
    CGSize newSize = CGSizeMake(self.size.width * ratio, self.size.height * ratio);
    return [self scaleToSize:newSize];
}

- (UIImage *)scaleAspectToSize:(CGSize)size {
    CGFloat minRatio = MIN(size.width / self.size.width, size.height / self.size.height);
    return [self scaleToRatio:minRatio];
}


@end
